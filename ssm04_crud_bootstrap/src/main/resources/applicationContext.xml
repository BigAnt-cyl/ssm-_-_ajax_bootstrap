<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!--   配置 spring 创建容器时要扫描的包，如：包下设置注解的 @Service @Repository @Component @AutoWried-->
    <context:component-scan base-package="cn.cyl">
        <!--制定扫包规则，不扫描 @Controller注解的JAVA类，其他的还是要扫描 -->
        <!--@Controller 注解的 JAVA 类是由springmvc来扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--加载数据库常量配置文件-->
    <context:property-placeholder location="classpath:db.properties" />

    <!--配置数据源连接池-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!-- 配置 MyBatis 的 Session 工厂 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!--起别名-->
        <property name="typeAliasesPackage" value="cn.cyl.domain"/>
        <!--引用mybatis文件-->
        <!--<property name="configLocation" value="classpath:SqlMapConfig.xml"/>-->

        <property name="plugins">
            <array>
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            <!--参数合理化
                    如果当前currPage < 1  则按currPage = 1查询
                    如果当前currPage > totalPage(总页数)  则按currPage = totalPage 查询-->
                            reasonable=true
                            <!-- 指定数据库方言 -->
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>

    </bean>

    <!-- MapperScannerConfigurer 配置自动扫描所有 Mapper 接口和文件，
        然后查找类路径下的映射器并自动将它们创建成MapperFactoryBean，
        MapperFactoryBean生成这些接口的代理类，并注入到应用程序中-->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--扫描这个包下面所有的接口和映射文件-->
        <property name="basePackage" value="cn.cyl.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!--配置Spring框架声明式事务管理-->
    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!--配置事务通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true"/>
            <tx:method name="*" isolation="DEFAULT"/>
        </tx:attributes>
    </tx:advice>

    <!--配置AOP增强-->
    <aop:config>
        <aop:pointcut id="service" expression="execution(* cn.cyl.service.impl.*ServiceImpl.*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="service"/>
    </aop:config>
</beans>
